{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../src/app/cli.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAAE,iBAAiB,EAAE,MAAM,iDAAiD,CAAC;AACpF,OAAO,EAAE,aAAa,EAAE,MAAM,6CAA6C,CAAC;AAC5E,OAAO,EAAE,kBAAkB,EAAE,MAAM,uCAAuC,CAAC;AAC3E,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAEnD,KAAK,UAAU,IAAI;IACjB,MAAM,WAAW,GAAG,IAAI,kBAAkB,EAAW,CAAC;IACtD,MAAM,cAAc,GAAG,IAAI,cAAc,CAAC,WAAW,CAAC,CAAC;IACvD,MAAM,QAAQ,GAAG,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACxE,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC;IAElD,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,OAAO,CAAC,KAAK,EAAE,CAAC;QACd,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC;YAC1B,OAAO,EAAE,iDAAiD;YAC1D,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,OAAO,EAAE;gBACzC,EAAE,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,QAAQ,EAAE;gBAC5C,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,UAAU,EAAE;gBAC5C,EAAE,IAAI,EAAE,qBAAqB,EAAE,KAAK,EAAE,KAAK,EAAE;gBAC7C,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE;aAClC;SACF,CAAC,CAAC;QAEH,IAAI,CAAC;YACH,QAAQ,MAAM,EAAE,CAAC;gBACf,KAAK,OAAO,CAAC,CAAC,CAAC;oBACb,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC;oBACjE,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC,CAAC;oBAC1D,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;oBAClD,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBACrC,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;oBACzC,MAAM;gBACR,CAAC;gBACD,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACd,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC,CAAC;oBAC7C,MAAM;gBACR,CAAC;gBACD,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChB,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;oBACvC,MAAM;gBACR,CAAC;gBACD,KAAK,KAAK,CAAC,CAAC,CAAC;oBACX,MAAM,KAAK,GAAG,cAAc,CAAC,cAAc,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;wBACtD,EAAE,EAAE,CAAC,CAAC,IAAqB,CAAC;wBAC5B,IAAI,EAAE,CAAC,CAAC,MAAuB,CAAC;wBAChC,WAAW,EAAE,CAAC,CAAC,aAA8B,CAAC;qBAC/C,CAAC,CAAC,CAAC;oBACJ,UAAU,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;oBAC1C,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,sBAAsB,CAAC,CAAC;oBAC3D,MAAM;gBACR,CAAC;gBACD,KAAK,OAAO,CAAC,CAAC,CAAC;oBACb,KAAK,GAAG,IAAI,CAAC;oBACb,MAAM;gBACR,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;gBAC3B,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YACzC,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACzC,CAAC;QACH,CAAC;gBAAS,CAAC;YACT,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;AACH,CAAC;AAED,IAAI,EAAE,CAAC","sourcesContent":["import { input, select } from \"@inquirer/prompts\";\nimport { Cultivo } from \"../domain/entities/Cultivo.js\";\nimport { SensorTemperatura } from \"../domain/entities/sensors/SensorTemperatura.js\";\nimport { SensorHumedad } from \"../domain/entities/sensors/SensorHumedad.js\";\nimport { InMemoryRepository } from \"../repositories/InMemoryRepository.js\";\nimport { CultivoService } from \"../services/CultivoService.js\";\nimport { SensorService } from \"../services/SensorService.js\";\nimport { generarCSV } from \"../utils/csvReport.js\";\n\nasync function main() {\n  const cultivoRepo = new InMemoryRepository<Cultivo>();\n  const cultivoService = new CultivoService(cultivoRepo);\n  const sensores = [new SensorTemperatura(\"t1\"), new SensorHumedad(\"h1\")];\n  const sensorService = new SensorService(sensores);\n\n  let salir = false;\n  while (!salir) {\n    const opcion = await select({\n      message: \"Sistema de Invernadero - Seleccione una opción:\",\n      choices: [\n        { name: \"Crear cultivo\", value: \"crear\" },\n        { name: \"Listar cultivos\", value: \"listar\" },\n        { name: \"Leer sensores\", value: \"sensores\" },\n        { name: \"Generar reporte CSV\", value: \"csv\" },\n        { name: \"Salir\", value: \"salir\" }\n      ]\n    });\n\n    try {\n      switch (opcion) {\n        case \"crear\": {\n          const id = parseInt(await input({ message: \"ID del cultivo:\" }));\n          const tipo = await input({ message: \"Tipo de cultivo:\" });\n          const cultivo = new Cultivo(id, tipo, new Date());\n          cultivoService.crearCultivo(cultivo);\n          console.log(\"Cultivo creado con éxito!\");\n          break;\n        }\n        case \"listar\": {\n          console.log(cultivoService.listarCultivos());\n          break;\n        }\n        case \"sensores\": {\n          console.log(sensorService.leerTodos());\n          break;\n        }\n        case \"csv\": {\n          const datos = cultivoService.listarCultivos().map(c => ({\n            id: c[\"id\" as keyof Cultivo],\n            tipo: c[\"tipo\" as keyof Cultivo],\n            fechaInicio: c[\"fechaInicio\" as keyof Cultivo]\n          }));\n          generarCSV(\"reporte_cultivos.csv\", datos);\n          console.log(\"Reporte generado: \" + \"reporte_cultivos.csv\");\n          break;\n        }\n        case \"salir\": {\n          salir = true;\n          break;\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(\"Error:\", error.message);\n      } else {\n        console.error(\"Error:\", String(error));\n      }\n    } finally {\n      console.log(\"Operación finalizada.\\n\");\n    }\n  }\n}\n\nmain();"]}